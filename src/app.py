import os
import asyncio
from typing import Optional, Tuple
import re
from datetime import datetime
from gorky_guide import get_reason, render_guide_text

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from aiohttp import web, ClientSession, ClientTimeout
from pathlib import Path

from dotenv import load_dotenv

from src.route_builder_limit import plan_route_under_budget
from src.utils import geocode_nominatim

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL")
HOST = os.getenv("HOST", "0.0.0.0")
PORT = int(os.getenv("PORT", "8080"))

ROUTES_DIR = os.getenv("ROUTES_DIR", "routes")
Path(ROUTES_DIR).mkdir(parents=True, exist_ok=True)

if not BOT_TOKEN:
    raise RuntimeError("Set BOT_TOKEN env var")
if not PUBLIC_BASE_URL or not PUBLIC_BASE_URL.startswith("https://"):
    raise RuntimeError("Set PUBLIC_BASE_URL env var with HTTPS URL, e.g. https://xxx.ngrok.io")

class BuildRoute(StatesGroup):
    interests = State()
    hours = State()
    location_method = State()
    address = State()
    coord_lon = State()
    coord_lat = State()
    geo = State()

dp = Dispatcher()

def _parse_num(s: str) -> float:
    """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –∑–∞–ø—è—Ç—É—é –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.
        Args:
            s (str): –í—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä. "1,5" –∏–ª–∏ "1.5").
        Returns:
            float: –ß–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π.
    """
    return float((s or "").strip().replace(",", "."))

async def geocode_address(address: str) -> Optional[Tuple[float, float]]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≥–µ–æ–∫–æ–¥–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π Nominatim –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.
    Args:
        address (str): –ê–¥—Ä–µ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.
    Returns:
        Optional[Tuple[float, float]]: (lat, lon) –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ/–æ—à–∏–±–∫–∞.
    """
    url = "https://nominatim.openstreetmap.org/search"
    params = {"q": address, "format": "json", "limit": 1}
    headers = {"User-Agent": "WalkingRouteBot/1.0 (contact: your_email@example.com)"}
    timeout = ClientTimeout(total=8)
    try:
        async with ClientSession(timeout=timeout, headers=headers) as sess:
            async with sess.get(url, params=params) as resp:
                if resp.status != 200:
                    return None
                data = await resp.json()
                if not data:
                    return None
                lat = float(data[0]["lat"])
                lon = float(data[0]["lon"])
                return lat, lon
    except Exception:
        return None

def kb_start() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="start_wizard")]])

def kb_location_choice() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π", callback_data="loc_geo")],
        [InlineKeyboardButton(text="üè† –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å", callback_data="loc_addr")],
        [InlineKeyboardButton(text="üß≠ –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–¥–æ–ª–≥–æ—Ç–∞ ‚Üí —à–∏—Ä–æ—Ç–∞)", callback_data="loc_coord")],
        [InlineKeyboardButton(text="üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart")]
    ])

def kb_restart_only() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart")]])

async def send_step1(message: Message, state: FSMContext):
    await state.set_state(BuildRoute.interests)
    await message.answer("1/3. –ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—Ä–∏—Ç-–∞—Ä—Ç, –∏—Å—Ç–æ—Ä–∏—è, –∫–æ—Ñ–µ–π–Ω–∏):", reply_markup=kb_restart_only())

@dp.message(Command("start"))
async def cmd_start(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥—É–ª–∫—É.", reply_markup=kb_start())

@dp.message(Command("restart"))
@dp.message(Command("new"))
async def cmd_restart(m: Message, state: FSMContext):
    await state.clear()
    await send_step1(m, state)

@dp.callback_query(F.data == "restart")
async def cb_restart(c, state: FSMContext):
    await state.clear()
    await send_step1(c.message, state)
    await c.answer()

@dp.callback_query(F.data == "start_wizard")
async def cb_start_wizard(c, state: FSMContext):
    await send_step1(c.message, state)
    await c.answer()

@dp.message(BuildRoute.interests)
async def ask_hours(m: Message, state: FSMContext):
    await state.update_data(interests=(m.text or "").strip())
    await state.set_state(BuildRoute.hours)
    await m.answer(
        "2/3. –°–∫–æ–ª—å–∫–æ —É –≤–∞—Å –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É (–≤ —á–∞—Å–∞—Ö)? "
        "–ú–æ–∂–Ω–æ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ: –Ω–∞–ø—Ä–∏–º–µ—Ä 1.5",
        reply_markup=kb_restart_only()
    )

@dp.message(BuildRoute.hours)
@dp.message(BuildRoute.hours)
async def ask_location_method(m: Message, state: FSMContext):
    text = (m.text or "").strip().replace(",", ".")
    try:
        hours = float(text)
        if hours <= 0 or hours>24:
            raise ValueError
    except Exception:
        await m.answer(
            "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–∏—Å–ª–æ —á–∞—Å–æ–≤ (–º–æ–∂–Ω–æ —Å –¥—Ä–æ–±–Ω–æ–π —á–∞—Å—Ç—å—é), –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.5",
            reply_markup=kb_restart_only()
        )
        return

    await state.update_data(hours=hours)
    await state.set_state(BuildRoute.location_method)
    await m.answer("3/3. –ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?", reply_markup=kb_location_choice())

@dp.callback_query(BuildRoute.location_method, F.data == "loc_addr")
async def choose_addr(c, state: FSMContext):
    await state.set_state(BuildRoute.address)
    await c.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å (—É–ª–∏—Ü–∞, –¥–æ–º, –≥–æ—Ä–æ–¥):", reply_markup=kb_restart_only())
    await c.answer()

@dp.callback_query(BuildRoute.location_method, F.data == "loc_coord")
async def choose_coords(c, state: FSMContext):
    await state.set_state(BuildRoute.coord_lon)
    await c.message.answer("–û–∫. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **–¥–æ–ª–≥–æ—Ç—É** (lon), –Ω–∞–ø—Ä–∏–º–µ—Ä: 44.003111", reply_markup=kb_restart_only())
    await c.answer()

@dp.callback_query(BuildRoute.location_method, F.data == "loc_geo")
async def choose_geo(c, state: FSMContext):
    await state.set_state(BuildRoute.geo)
    await c.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ ¬´üìé –°–∫—Ä–µ–ø–∫–∞ ‚Üí –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª.", reply_markup=kb_restart_only())
    await c.answer()

@dp.message(BuildRoute.address)
async def got_address(m: Message, state: FSMContext):
    address = (m.text or "").strip()
    if not address:
        await state.set_state(BuildRoute.location_method)
        await m.answer(
            "–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–¥—Ä–µ—Å. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è:",
            reply_markup=kb_location_choice()
        )
        return

    await m.answer("–ü—Ä–µ–æ–±—Ä–∞–∑—É—é –∞–¥—Ä–µ—Å –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã‚Ä¶", reply_markup=ReplyKeyboardRemove())
    coords = geocode_nominatim(address)
    if not coords:
        await state.set_state(BuildRoute.location_method)
        await m.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
            reply_markup=kb_location_choice()
        )
        return

    lon, lat, display_name = coords[0]
    await m.answer(f"–ù–∞—à—ë–ª: {display_name}\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lon:.6f}, {lat:.6f} ")
    await finalize_route(m, state, lat=lat, lon=lon)


@dp.message(BuildRoute.coord_lon)
async def got_lon(m: Message, state: FSMContext):
    try:
        lon = _parse_num(m.text)
        if not (-180.0 <= lon <= 180.0):
            raise ValueError
    except Exception:
        await m.answer("–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ -180..180. –ü—Ä–∏–º–µ—Ä: 43.987654", reply_markup=kb_restart_only())
        return
    await state.update_data(lon=lon)
    await state.set_state(BuildRoute.coord_lat)
    await m.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **—à–∏—Ä–æ—Ç—É** (lat), –Ω–∞–ø—Ä–∏–º–µ—Ä: 56.328437", reply_markup=kb_restart_only())

@dp.message(BuildRoute.coord_lat)
async def got_lat(m: Message, state: FSMContext):
    try:
        lat = _parse_num(m.text)
        if not (-90.0 <= lat <= 90.0):
            raise ValueError
    except Exception:
        await m.answer("–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ -90..90. –ü—Ä–∏–º–µ—Ä: 56.328437", reply_markup=kb_restart_only())
        return

    data = await state.get_data()
    lon = data.get("lon")
    if lon is None:
        await m.answer("–ù–µ –Ω–∞—à—ë–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –¥–æ–ª–≥–æ—Ç—É. –ù–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞¬ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=kb_restart_only())
        return

    await finalize_route(m, state, lat=lat, lon=lon)

@dp.message(BuildRoute.geo, F.location)
async def got_geo(m: Message, state: FSMContext):
    lat = m.location.latitude
    lon = m.location.longitude
    await m.answer("–°–ø–∞—Å–∏–±–æ, –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞.")
    await finalize_route(m, state, lat=lat, lon=lon)

@dp.message(BuildRoute.geo)
async def geo_expected(m: Message, state: FSMContext):
    await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ ¬´üìé –°–∫—Ä–µ–ø–∫–∞ ‚Üí –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞¬ª.", reply_markup=kb_restart_only())

async def finalize_route(m: Message, state: FSMContext, *, lat: float, lon: float):
    """
        –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: —Å–æ–±–∏—Ä–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Å—Ç—Ä–æ–∏—Ç –º–∞—Ä—à—Ä—É—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç-–≥–∏–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É.
        Args:
            m (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
            state (FSMContext): –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–∏.
            lat (float): –®–∏—Ä–æ—Ç–∞ —Å—Ç–∞—Ä—Ç–∞.
            lon (float): –î–æ–ª–≥–æ—Ç–∞ —Å—Ç–∞—Ä—Ç–∞.
        Returns:
            None
    """
    data = await state.get_data()
    interests = data["interests"]
    hours = data["hours"]

    u = m.from_user
    raw_name = u.username or f"{(u.first_name or '').strip()} {(u.last_name or '').strip()}".strip() or f"id{u.id}"
    safe_user = re.sub(r"[^A-Za-z0-9_.-]+", "_", raw_name)[:40] or f"id{u.id}"
    ts = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"route_{safe_user}_{ts}.html"
    outfile = Path(ROUTES_DIR) / filename

    await m.answer("–°—Ç—Ä–æ—é –º–∞—Ä—à—Ä—É—Ç...")
    try:
        result = await plan_route_under_budget(
            query=interests,
            time_budget_hours=hours,
            user_lat=lat,
            user_lon=lon,
            outfile=str(outfile),
            fetch_k=50,
            alpha=0.8,
            geo_tau_km=1.2,
            roundtrip=False,
            pace_scale=1.67,
        )

    except Exception as e:
        await m.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç: {e}", reply_markup=kb_restart_only())
        return

    reason = result.get("reason")
    if reason != "ok_under_budget":
        if reason == "time_budget_too_small":
            est_min = result.get("estimated_minutes")  # –º–æ–∂–µ—Ç –±—ã—Ç—å float
            hint = ""
            if est_min:
                try:
                    est_min = int(round(float(est_min)))
                    hint = f" (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Å–µ–π—á–∞—Å ~{est_min} –º–∏–Ω)"
                except Exception:
                    pass
            await m.answer(
                "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å —É–ª–æ–∂–∏—Ç—å –≤–æ –≤—Ä–µ–º—è." + hint +
                "\n–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
                "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∏\n"
                "‚Ä¢ –í—ã–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—Ç –±–ª–∏–∂–µ –∫ –ù–∏–∂–Ω–µ–º—É –ù–æ–≤–≥–æ—Ä–æ–¥—É\n"
                "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´—Å—Ç—Ä–∏—Ç-–∞—Ä—Ç, –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è¬ª)",
                reply_markup=kb_location_choice()
            )
            await state.set_state(BuildRoute.location_method)
            return

        if reason == "no_candidates":
            await m.answer(
                "–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–ª–∏ –Ω–∞—á–∞—Ç—å –±–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞.",
                reply_markup=kb_restart_only()
            )
            return

        await m.answer(
            "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
            reply_markup=kb_restart_only()
        )
        return
    places = result.get("selected_poi", [])
    node_roles = result.get("node_roles",
                            []) or []

    roles_for_places = node_roles[1:1 + len(places)]

    main_points = [poi for poi, role in zip(places, roles_for_places) if role == "main"]
    extra_points = [poi for poi, role in zip(places, roles_for_places) if role != "main"]

    if not main_points and places:
        main_points = places[:min(3, len(places))]
        extra_points = places[min(3, len(places)):]
    guide = get_reason(
        user_query=interests,
        main_points=main_points,
        extra_points=extra_points,
        model_name="gemini-2.5-flash",
        temperature=0.3
    )
    guide_text = render_guide_text(guide)

    if guide_text:
        await m.answer(guide_text)
    else:
        await m.answer("–æ—à–∏–±–∫–∞")

    url = f"{PUBLIC_BASE_URL}/routes/{filename}"
    kb_open = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä—à—Ä—É—Ç", web_app=WebAppInfo(url=url))],
        [InlineKeyboardButton(text="üîÅ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart")]
    ])

    await m.answer("–ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç üëá", reply_markup=kb_open)
    await state.clear()

async def create_web_app():
    app = web.Application()
    routes_dir_path = Path(ROUTES_DIR).resolve()

    async def walking_route(_):
        return web.FileResponse(routes_dir_path / "walking_route.html")

    app.add_routes([
        web.get("/walking_route", walking_route),
        web.static("/routes", str(routes_dir_path), show_index=False),
        web.get("/health", lambda _: web.Response(text="OK")),
    ])
    return app

async def main():
    bot = Bot(BOT_TOKEN)
    web_app = await create_web_app()

    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, HOST, PORT)
    await site.start()

    print(f"Web on http://{HOST}:{PORT}")

    try:
        await dp.start_polling(bot)
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())
